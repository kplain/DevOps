<?xml version="1.0"?>
<!--
    Copyright (c) 2018 Software AG, Darmstadt, Germany and/or its licensors

    SPDX-License-Identifier: Apache-2.0

    Licensed under the Apache License, Version 2.0 (the "License");
    You may not use this file except in compliance with the License.
    You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.                                                            
 -->

<project name="Package" default="packageWM" basedir=".">

	<!-- Global Variables that concern the code and should be changed only if the code is changed -->
	<!-- Template for the Deployer Project Specification -->
	<property name="deployerProjectDefinitionTemplate" value="resources/ProjectSpecificationTemplate.xml"/>
	
	<!-- Target filename of the Deployer Project Specification for this run -->
	<property name="deployerProjectDefinition" value="${workspace.dir}/ProjectAutomator/${projectName}DeploymentSpec.xml"/>
	
	<!-- XSLT for the Deployer Project Specification - adding Repository and Project Sections -->
	<property name="initialXSLT" value="resources/setUpInitial.xslt"/>

	<target name="packageWM" description="main packaging task" depends="startPackaging, initPAandDeployerWindows, initPAandDeployerUnix, createDeployerSpec, execProjectAutomator, execVarSubImport">
	</target>

	<target name="startPackaging">		
		<echo message="Start packaging ${projectName}" />
	</target>

	<!-- determine which PA and Deployer executables are used - different for Windows and Unix -->
	<condition property="isWindows">
		<os family="windows" />
	</condition>

	<condition property="isUnix">
		<os family="unix" />
	</condition>

	<target name="initPAandDeployerWindows" if="isWindows">
		<property name="deployerExecutable" value="Deployer.bat" />
		<property name="deployerAutomatorExecutable" value="projectautomator.bat" />
	</target>

	<target name="initPAandDeployerUnix" if="isUnix">
		<property name="deployerExecutable" value="Deployer.sh" />
		<property name="deployerAutomatorExecutable" value="projectautomatorUnix.sh" />
	</target>
	<!-- determine which PA and Deployer executables are used - different for Windows and Unix -->

		
	<target name="createDeployerSpec" depends="cleanupDeployerSpec,setupDeployerSpec">		
	</target>
	
	<target name="cleanupDeployerSpec">
		<if>
			<available file="${deployerProjectDefinition}"/>
			<then>
				<delete file="${deployerProjectDefinition}"/>
			</then>
		</if>	
	</target>
	
	<target name="setupDeployerSpec" description="Creates the project automator xml with XSLT based on the given variables.">				
		<xslt style="${initialXSLT}" in="${deployerProjectDefinitionTemplate}" out="${deployerProjectDefinition}">

			<!--target environment list-->
			<param name="environments" expression="${environments}" />

			<!--build/deployer server props -->
			<param name="deployerHost" expression="${deployerHost}" />
			<param name="deployerPort" expression="${deployerPort}" />
			<param name="deployerUsername" expression="${deployerUsername}" />
			<param name="deployerPassword" expression="${deployerPassword}" />
			<param name="deployerPasswordHandle" expression="${deployerPasswordHandle}" />

			<!-- general props -->
			<param name="repoName" expression="${repositoryName}" />
			<param name="repoPath" expression="${buildOutputDir}" />
			<param name="projectName" expression="${projectName}" />				
			<param name="buildAPI" expression="${enable.build.APIGateway}"/>
			
			<!--target server props -->
			<param name="envConfig" expression="${SAG_CI_HOME}/${envConfig}" />

		</xslt>				
	</target>
	
	<target name="execProjectAutomator">
		<path id="pathProjectdefinition">
			<pathelement location="${deployerProjectDefinition}" />
		</path>
		<pathconvert refid="pathProjectdefinition" property="pathProjectdefinitionFile"/>
		
		<exec dir="${deployerInstallationPath}"  executable="${deployerInstallationPath}/${deployerAutomatorExecutable}" failonerror="true" resultproperty="appState">		
			<arg value="${pathProjectdefinitionFile}" />
		</exec>
		
		<if>			
			<equals arg1="${appState}" arg2="0" trim="true"/>			
			<then>
				<echo message ="Project Automator successfully executed."/>
			</then>
			<else>			    				
				<fail message="Project Automator failed."/>
			</else>
		</if>		
	</target>

	<target name="execVarSubImport" description="Imports variable substition configuration file for each environment project.">				
		<for param="environment" list="${environments}">
			<sequential>
				<echo message="Processing VarSub import for environment @{environment}."/>
				<var name="envProjectName" value="${projectName}_@{environment}"/>
				<var name="deploymentMapName" value="@{environment}_DeploymentMap"/>
				<var name="varSubFilename" value="${envProjectName}_DeploymentMap.vs"/>
				<if>
					<available file="${workspace.dir}/${varsubDir}${deploymentMapName}.vs" type="file" />
					<then>
						<copy file="${workspace.dir}/${varsubDir}${deploymentMapName}.vs" tofile="${deployerInstallationPath}/../replicate/inbound/${varSubFilename}" overwrite="true" />
						<exec executable="${deployerInstallationPath}/${deployerExecutable}" dir="${deployerInstallationPath}" failonerror="true" resultproperty="appState">
							<arg value="--import"/>
							<arg line="-varsub"/>
							<arg line="-project ${envProjectName}"/>
							<arg line="-vsFile ${varSubFilename}"/>
							<arg line="-map ${deploymentMapName}"/>
							<arg line="-host ${deployerHost}"/>
							<arg line="-port ${deployerPort}"/>
							<arg line="-user ${deployerUsername}"/>
							<arg line="-pwd ${deployerPassword}"/>
							<arg value="-force"/>
						</exec>
		
						<if>			
						<equals arg1="${appState}" arg2="0" trim="true"/>			
							<then>
								<echo message="Variable substitution import successfully executed."/>
							</then>
							<else>			    				
								<fail message="Variable substitution import failed."/>
							</else>
						</if>		
					</then>
				</if>
			</sequential>
		</for>
	</target>	
</project>
